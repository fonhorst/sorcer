/*
 * Copyright 2010 the original author or authors.
 * Copyright 2010 SorcerSoft.org.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sorcer.util.ui;

import java.io.Serializable;

/**
 * This class serves as identifier for objects that are maintained by SORCER.
 * Each identifier has an URL representation of form
 * sorcer://host.domain.suf/type/identifier where SORCER describes the protocol
 * (sorcer, context) followed by the IP address of the responsible SORCER
 * server, the type of the object {a context path} and the unique identifier of
 * the object (generated by the responsible SORCER server on object creation).
 */

public class ID extends Object implements Serializable {
	/**
	 * the actual identifier
	 * 
	 * @see java.util.String
	 */
	private String url = null;

	public final static String protocol = "sorcer";

	/**
	 * default constructor - does nothing
	 */
	public ID() {
		url = null;
	}

	/**
	 * Creates a new ID object from its String representation.
	 * 
	 * @param url
	 *            the String representation of this ID
	 */
	public ID(String url) {
		this.url = url;
	}

	/**
	 * Creates a new ID object from the specified components
	 * 
	 * @param host
	 *            the host name of the event server
	 * @param port
	 *            the port of the event server
	 * @param type
	 *            the type of the resource { user, location, session }
	 */
	public ID(String host, int port, String type) {
		this.url = new String(protocol + "://" + host + ":" + port + "/" + type);
	}

	/**
	 * Creates a new ID object from the specified components
	 * 
	 * @param host
	 *            the host name of the event server
	 * @param port
	 *            the port of the event server
	 * @param type
	 *            the type of the resource { user, location, session }
	 * @param identifier
	 *            the unique identifier for this resource
	 */
	public ID(String host, int port, String type, String identifier) {
		this.url = new String(protocol + "://" + host + ":" + port + "/" + type
				+ "/" + identifier);
	}

	/**
	 * Creates a new ID object from the specified components
	 * 
	 * @param url
	 *            the URL string of the event server
	 * @param type
	 *            the type of the resource { user, location, session }
	 * @param identifier
	 *            the unique identifier for this resource
	 */
	public ID(String url, String type, String identifier) {
		this.url = new String(protocol + "://" + url.substring(7) + "/" + type
				+ "/" + identifier);
	}

	/**
	 * @return the String representation of this object
	 */
	public String toString() {
		return url;
		// return new
		// String("url: "+url+" host: "+getHost()+" port: "+getPort()+"
		// type: "+getType()+" id: "+getIdentifier());
	}

	/**
	 * @return the host encoded in this object
	 */
	public String getHost() {
		if (url == null)
			return null;
		String host = null;
		try {
			host = url.substring(8);
		} catch (StringIndexOutOfBoundsException e) {
			return null;
		}
		int pos = host.indexOf(":");
		if (pos < 0)
			return null;
		try {
			host = host.substring(0, pos);
		} catch (StringIndexOutOfBoundsException e2) {
			return null;
		}
		return host;
	}

	/**
	 * @return the port encoded in this object
	 */
	public int getPort() {
		int portnum = 0;
		if (url == null)
			return portnum;
		String port = null;
		try {
			port = url.substring(8);
		} catch (StringIndexOutOfBoundsException e) {
			return portnum;
		}
		int pos1 = port.indexOf(":");
		if (pos1 < 0)
			return portnum;
		int pos2 = port.indexOf("/");
		if (pos1 < 0)
			return portnum;
		try {
			port = port.substring(pos1 + 1, pos2);
		} catch (StringIndexOutOfBoundsException e2) {
			return portnum;
		}
		try {
			portnum = Integer.valueOf(port).intValue();
		} catch (NumberFormatException ne) {
		}
		return portnum;
	}

	/**
	 * @return the type encoded in this object
	 */
	public String getType() {
		if (url == null)
			return null;
		String type = null;
		try {
			type = url.substring(8);
		} catch (StringIndexOutOfBoundsException e) {
			return null;
		}
		int pos = type.indexOf("/");
		if (pos < 0)
			return null;
		try {
			type = type.substring(pos + 1);
		} catch (StringIndexOutOfBoundsException e2) {
			return null;
		}

		pos = type.indexOf("/");
		if (pos < 0) // no identifier present
			return type.trim();
		try {
			type = type.substring(0, pos);
		} catch (StringIndexOutOfBoundsException e3) {
			return null;
		}
		return type;
	}

	/**
	 * @return the identifier encoded in this object
	 */
	public String getIdentifier() {
		if (url == null)
			return null;
		String id = null;
		try {
			id = url.substring(8);
		} catch (StringIndexOutOfBoundsException e) {
			return null;
		}
		int pos = id.indexOf("/");
		if (pos < 0)
			return null;
		try {
			id = id.substring(pos + 1);
		} catch (StringIndexOutOfBoundsException e2) {
			return null;
		}

		pos = id.indexOf("/");
		if (pos < 0)
			return null;
		try {
			id = id.substring(pos + 1);
		} catch (StringIndexOutOfBoundsException e3) {
			return null;
		}
		return id.trim();
	}

	/**
	 * Compare ID with other object (must be an ID).
	 * 
	 * @return true if other object is ID and both objects are equal, false
	 *         otherwise.
	 */
	public boolean equals(Object obj) {
		if (obj instanceof ID) {
			ID other = (ID) obj;
			return other.url.equals(this.url);
		} else
			return false;
	}

	/**
	 * @return a hash code value for this object
	 */
	public int hashCode() {
		return url.hashCode();
	}
}
