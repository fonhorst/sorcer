<?xml version="1.0"?>
<!-- 
 * Copyright 2010 the original author or authors.
 * Copyright 2010 SorcerSoft.org.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

How to use the common-run.xml file in your project. 
To include this file in your custom *-run-buld.xml have the import line:

  <import file="../../common-run.xml" />

-->

<project name="" default="" basedir="." xmlns:ac="http://ant-contrib.sourceforge.net">

	<property name="dospawn" value="false" />

	<property environment="env" />
	<property name="java.home" value="${env.JAVA_HOME}" />	
	<condition property="iGrid.home" value="${env.IGRID_HOME}" else="${basedir}/../">
		<isset property="env.IGRID_HOME" />
	</condition>	
	<condition property="rio.home" value="${env.RIO_HOME}" else="${iGrid.home}/lib/rio">
		<isset property="env.RIO_HOME" />
	</condition>
	
	<exec executable="hostname" outputproperty="hostname" />
	<echo message="Hostname = ${hostname}" />
	<echo message="env IGRID_HOME = ${iGrid.home}" />
	<echo message="env RIO_HOME = ${rio.home}" />

	<loadproperties srcfile="${iGrid.home}/configs/sorcer.env" />

	<property name="v.sorcer" value="${sorcer.version}" />
	<property name="v.jini" value="${sorcer.lib.river.version}" />
	<property name="v.blitz" value="${sorcer.lib.blitz.version}" />
	<property name="v.sleepycat" value="${sorcer.lib.sleepycat.version}" />
	<property name="v.rio" value="${sorcer.lib.rio.version}" />
	<property name="v.groovy" value="${sorcer.lib.groovy.version}" />
	
	<property name="mvn.repo" value="${sorcer.local.repo.location}" />

	<property name="jini.lib" value="${lib}/river/lib" />
	<property name="jini-dl.lib" value="${lib}/river/lib-dl" />
	<property name="jini-ext.lib" value="${lib}/river/lib-ext" />

	<property name="docs" value="${iGrid.home}/docs/${module.name}" />
	<property name="iGrid.policy" value="${iGrid.home}/policy" />
	<property name="iGrid.config" value="${iGrid.home}/configs" />

	
	<taskdef resource="net/sf/antcontrib/antlib.xml" uri="http://ant-contrib.sourceforge.net">
		<classpath>
			<pathelement location="${mvn.repo}/ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<!-- Properties are IMMUTABLE. Once set it cannot be changed. Here we specify that environment variables take precedence. -->

	<condition property="localhost" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<condition property="local.interface" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<!--SAB -->
	<condition property="provider.webster.interface.TMP" value="${provider.webster.interface}">
		<not>
			<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
		</not>
	</condition>
	<condition property="provider.webster.interface.TMP" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<echo message="provider.webster.interface.TMP = ${provider.webster.interface.TMP}" />

	<condition property="provider.webster.url" value="http://${env.IGRID_WEBSTER_INTERFACE}:${env.IGRID_WEBSTER_PORT}">
		<and>
			<isset property="env.IGRID_WEBSTER_INTERFACE" />
			<isset property="env.IGRID_WEBSTER_PORT" />
		</and>
	</condition>

	<condition property="provider.webster.url" value="http://${local.interface}:${provider.webster.port}" else="http://${provider.webster.interface}:${provider.webster.port}">
		<isset property="local.interface" />
	</condition>

	<echo message="provider.webster.url = ${provider.webster.url}" />

	<condition property="data.server.url" value="http://${env.DATA_SERVER_INTERFACE}:${env.DATA_SERVER_PORT}" else="http://${data.server.interface}:${data.server.port}">
		<and>
			<isset property="env.DATA_SERVER_INTERFACE" />
			<isset property="env.DATA_SERVER_PORT" />
		</and>
	</condition>

	<condition property="requestor.policy" value="${basedir}/src/main/resources/policy/req.policy">
		<not>
			<isset property="requestor.policy" />
		</not>
	</condition>
	
	<target name="requestor.policy.check">
	  <condition property="requestor.policy.exists">
	    <available file="${requestor.policy}" type="file"/>
	  </condition>
	  <ac:if>
	      <not>
		<isset property="requestor.policy.exists" />
	      </not>
	      <ac:then>
		<property name="requestor.policy" value="${iGrid.home}/policy/sorcer.policy" />
		<echo>setting default policy: ${requestor.policy}</echo>
	      </ac:then>
	</ac:if>

	</target>

	<condition property="spawn.provider" value="no">
		<not>
			<isset property="spawn.provider" />
		</not>
	</condition>

	<target name="groovyRun">
		<groovy src="${groovySrc}">
			<classpath>
				<pathelement location="${groovyDir}" />
			</classpath>
		</groovy>
	</target>

	<target name="set-hostname">
		<condition property="hostname" value="${env.HOST}">
			<os family="unix" />
		</condition>
		<condition property="hostname" value="${env.COMPUTERNAME}">
			<os family="windows" />
		</condition>
		<echo message="host = ${hostname}" />
	</target>

	<!-- jini start classpath -->
	<path id="jini.classpath">
		<pathelement location="${mvn.repo}/net/jini/jsk-platform/${v.jini}/jsk-platform-${v.jini}.jar" />
		<pathelement location="${mvn.repo}/org/apache/river/start/${v.jini}/start-${v.jini}.jar" />
		<pathelement location="${mvn.repo}/au/net/Zeus/reference-collections/1.0.1/reference-collections-1.0.1.jar" />
		<pathelement location="${mvn.repo}/com/boundary/high-scale-lib/1.0.4-SNAPSHOT/high-scale-lib-1.0.4-SNAPSHOT.jar" />
 		<pathelement location="${mvn.repo}/net/jini/jsk-lib/${v.jini}/jsk-lib-${v.jini}.jar" />
		<pathelement location="${mvn.repo}/net/jini/lookup/serviceui/${v.jini}/serviceui-${v.jini}.jar" />
		<pathelement location="${mvn.repo}/org/slf4j/slf4j-api/1.7.5/slf4j-api-1.7.5.jar" />
		<pathelement location="${mvn.repo}/org/slf4j/slf4j-simple/1.7.5/slf4j-simple-1.7.5.jar" />		
	</path>
	
	<path id="boot.classpath">
		<path refid="jini.classpath" />
		<pathelement location="${mvn.repo}/org/sorcersoft/sorcer/boot/${v.sorcer}/boot-${v.sorcer}.jar" />
		<pathelement location="${mvn.repo}/org/sorcersoft/sorcer/sorcer-const/${v.sorcer}/sorcer-const-${v.sorcer}.jar" />
		<pathelement location="${mvn.repo}/net/jini/jsk-resources/${v.jini}/jsk-resources-${v.jini}.jar" />
		<pathelement location="${mvn.repo}/org/rioproject/rio-platform/${v.rio}/rio-platform-${v.rio}.jar" />
		<pathelement location="${mvn.repo}/org/rioproject/resolver/resolver-api/${v.rio}/resolver-api-${v.rio}.jar" />
		<pathelement location="${mvn.repo}/org/rioproject/rio-start/${v.rio}/rio-start-${v.rio}.jar" />
		<pathelement location="${mvn.repo}/org/codehaus/groovy/groovy-all/${v.groovy}/groovy-all-${v.groovy}.jar" />
		<pathelement location="${mvn.repo}/com/google/guava/14.0.1/guava-14.0.1.jar" />
		<pathelement location="${mvn.repo}/org/apache/commons/commons-lang3/3.1/commons-lang3-3.1.jar" />
		<pathelement location="${mvn.repo}/com/google/collections/google-collections/1.0/google-collections-1.0.jar" />
	</path>
	
	
	<condition property="pom.file" value="pom.xml">
		<not>
			<isset property="pom.file" />
		</not>
	</condition>

	<target name="mvn-init">
		<mvn-init />
	</target>

	<macrodef name="mvn-init" xmlns:artifact="urn:maven-artifact-ant">
		<attribute name="run.pom.file" default="${pom.file}" />
		<attribute name="requestor.api.jar" default="${requestor.groupId}:${requestor.api}:jar" />
		<sequential>
			<echo>run.pom.file=@{run.pom.file}</echo>
			<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpath="${mvn.repo}/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar" />
			<condition property="maven.repo.local" value="${mvn.repo}" else="${user.home}/.m2/repository">
				<isset property="mvn.repo" />
			</condition>
			<echo>maven.repo.local=${maven.repo.local}</echo>
			<artifact:localRepository id="local.repository" path="${maven.repo.local}" />
			<artifact:pom file="@{run.pom.file}" id="maven.project" />
			<artifact:dependencies pathId="compile.classpath" filesetId="compile.fileset" useScope="compile" versionsId="dependency.versions">
				<pom refid="maven.project" />
				<localRepository refid="local.repository" />
			</artifact:dependencies>
			<artifact:dependencies pathId="test.classpath" filesetId="test.fileset" useScope="test">
				<pom refid="maven.project" />
				<localRepository refid="local.repository" />
			</artifact:dependencies>
			<artifact:dependencies pathId="runtime.classpath" filesetId="runtime.fileset" useScope="runtime">
				<pom refid="maven.project" />
				<localRepository refid="local.repository" />
			</artifact:dependencies>

			<ac:if>
				<isset property="requestor.groupId"/>
				<ac:then>
					<artifact:dependencies pathId="requestor.classpath">
						<dependency groupId="${requestor.groupId}" artifactId="${requestor.name}" version="${requestor.version}" />						
					</artifact:dependencies>
					<path id="run-req.classpath">
						<path refid="runtime.classpath" />
						<path refid="requestor.classpath" />
						<path refid="jini.classpath" />
					</path>
				</ac:then>
				<ac:else>
				  	<path id="run-req.classpath">
						<path refid="runtime.classpath" />
						<path refid="jini.classpath" />
					</path>
				</ac:else>
			</ac:if>	


		</sequential>
	</macrodef>

	<target name="target.classes.check">
	  <condition property="target.classes.exists">
	    <available file="${basedir}/target/classes" type="dir"/>
	  </condition>
	</target>
	
	<target name="boot.provider" depends="target.classes.check, mvn-init">
	    <property name="runtime.classpath.string" refid="runtime.classpath" />
		<echo message="Runtime Classpath = ${runtime.classpath.string}" />
		
		<ac:if>
		  <isset property="provider.config" />		 
		    <ac:then>
		      <java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${spawn.provider}">
			      <classpath refid="boot.classpath" />
			      <arg value="${provider.config}" />
			      <!--        <jvmarg value="-Xdebug"/>
			      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000"/>-->
				  <env key="RIO_HOME" value="${rio.home}" />
				  <sysproperty key="iGrid.home" value="${iGrid.home}" />
				  <sysproperty key="RIO_HOME" value="${rio.home}" />
			      <sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
			      <sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
			      <sysproperty key="java.util.logging.config.file" value="${iGrid.home}/configs/sorcer.logging" />
			      <sysproperty key="provider.runtime.classpath" value="${runtime.classpath.string}" />			      
		      </java>
		  </ac:then>
		  <ac:else>
		    <ac:if>
		      <isset property="target.classes.exists" />		 
		      <ac:then>
			<java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${spawn.provider}">
				<classpath refid="boot.classpath" />
				<arg value="${basedir}/target/classes" />
				<env key="RIO_HOME" value="${rio.home}" />
				<sysproperty key="iGrid.home" value="${iGrid.home}" />
				<sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
				<sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
				<sysproperty key="java.util.logging.config.file" value="${iGrid.home}/configs/sorcer.logging" />
				<sysproperty key="provider.runtime.classpath" value="${runtime.classpath.string}" />
			</java>
		      </ac:then>
		      <ac:else>
			  <java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${spawn.provider}">
				<classpath refid="boot.classpath" />
				<env key="RIO_HOME" value="${rio.home}" />
				<sysproperty key="iGrid.home" value="${iGrid.home}" />
				<sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
				<sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
				<sysproperty key="java.util.logging.config.file" value="${iGrid.home}/configs/sorcer.logging" />
				<sysproperty key="provider.runtime.classpath" value="${runtime.classpath.string}" />
			  </java>
		      </ac:else>
		    </ac:if>
		  </ac:else>
		</ac:if>
	</target>
	
	<target name="run.requestor" depends="mvn-init, requestor.policy.check">
		<property name="myclasspath" refid="run-req.classpath" />
		<echo message="Run Classpath = ${myclasspath}" />
		<echo>Policy: ${requestor.policy}</echo>	     
		<ac:if>
			<isset property="requestor.codebase" />
			<ac:then>
			  	<echo message="Run Codebase = ${requestor.codebase}" />
				<java classname="${requestor.class}" fork="yes">
					<classpath refid="run-req.classpath" />
					<sysproperty key="java.util.logging.config.file" value="${iGrid.home}/configs/sorcer.logging" />
					<sysproperty key="java.security.policy" value="${requestor.policy}" />
					<sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
					<sysproperty key="java.rmi.server.codebase" value="${requestor.codebase}" />
				</java>
			</ac:then>
			<ac:else>
				<java classname="${requestor.class}" fork="yes">
					<classpath refid="run-req.classpath" />
					<sysproperty key="java.util.logging.config.file" value="${iGrid.home}/configs/sorcer.logging" />
					<sysproperty key="java.security.policy" value="${requestor.policy}" />
					<sysproperty key="sorcer.env.file" value="${iGrid.home}/configs/sorcer.env" />
				</java>
			</ac:else>
		</ac:if>
	</target>
</project>