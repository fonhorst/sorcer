/*
 * This configuration is used by the com.sun.jini.start utility to start a
 * ProvisionMonitor, including an embedded Webster, JMX Connector Service and
 * a Jini Lookup Service
 */
 import java.net.URL;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.RioDescriptorUtil;
import com.sun.jini.start.ServiceDescriptor;
import sorcer.provider.boot.SorcerServiceDescriptor;

com.sun.jini.start {
	// webster root directories
	sorcerLibPath = "${sorcer.home}${/}lib${/}sorcer${/}lib";
 	sorcerLibDlPath = "${sorcer.home}${/}lib${/}sorcer${/}lib-dl";
    jiniLibPath = "${sorcer.home}${/}lib${/}river${/}lib";
    jiniLibDLPath = "${sorcer.home}${/}lib${/}river${/}lib-dl";
    rioLibPath = "${sorcer.home}${/}lib${/}rio";
    groovyPath = "${sorcer.home}${/}lib${/}common${/}groovy";
    deployPath = "${sorcer.home}${/}deploy";
    spring = "${sorcer.home}${/}spring${/}spring-framework-2.5.6";
    
	//port = Booter.getWebsterPort(); 
	//port = 9010;
	port = 0;
	//address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();

 	wpolicy = "../policy/webster.policy";
    monitorConfig = "../configs/monitor.config";
    mpolicy = "../policy/monitor.policy";
    cybernodeConfig = "../configs/cybernode.config";
    cpolicy = "../policy/cybernode.policy";
    
    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up 4 directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)
        SorcerDescriptorUtil.getWebster(wpolicy, port,
                                         new String[] { sorcerLibPath,
                                         			    sorcerLibDlPath,
                                         			    jiniLibDLPath,
                                                        rioLibPath,
                                                        jiniLibPath,
                                                        groovyPath,
                                                        deployPath }),
                                                        
          /* Rio Cybernode */
        RioDescriptorUtil.getCybernode(cpolicy, cybernodeConfig),

        /* Rio Provision Monitor */
        RioDescriptorUtil.getMonitor(mpolicy, monitorConfig)
    };    

}
