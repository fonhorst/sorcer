/*
 * This configuration is used by the com.sun.jini.start utility to start a 
 * Cybernode, including an embedded Webster and a JMX Connector Service
 */
import java.net.URL;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.RioDescriptorUtil;
import com.sun.jini.start.ServiceDescriptor;

com.sun.jini.start {
	// webster root directories
	sorcerLibPath = "${sorcer.home}${/}lib${/}sorcer${/}lib";
 	sorcerLibDlPath = "${sorcer.home}${/}lib${/}sorcer${/}lib-dl";
    jiniLibPath = "${sorcer.home}${/}lib${/}river${/}lib";
    jiniLibDLPath = "${sorcer.home}${/}lib${/}river${/}lib-dl";
    rioLibPath = "${sorcer.home}${/}lib${/}rio";
    groovyPath = "${sorcer.home}${/}lib${/}common${/}groovy";
    deployPath = "${sorcer.home}${/}deploy";
    
	//port = Booter.getWebsterPort(); 
	port = -1;
	//address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();
	
    policy = "../policy/cybernode.policy";
    cybernodeConfig = "../configs/cybernode.config";

    serviceDescriptors = new ServiceDescriptor[] {
   
        /* SORCER Webster, set to serve up 4 directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)
        /*
        SorcerDescriptorUtil.getWebster(policy, port,
                                         new String[] { sorcerLibPath,
                                         			    sorcerLibDlPath,
                                         			    jiniLibDLPath,
                                                        rioLibPath,
                                                        jiniLibPath,
                                                        groovyPath,
                                                        deployPath }),
        */
        
        /* Rio Cybernode */
        RioDescriptorUtil.getCybernode(policy, cybernodeConfig)

    };    

}