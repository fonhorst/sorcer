<assembly>
    <!--<id>bin</id>-->
    <!-- We dont use the <id> element to avoid the extension to the directory
         and zip name -->
    <formats>
        <format>dir</format>
        <!--<format>zip</format>-->
    </formats>
    <includeBaseDirectory>false</includeBaseDirectory>
    <files>
        <!-- Copy the project's parent pom so we can correctly install Rio jars into the local repository -->
        <file>
            <source>${basedir}/../pom.xml</source>
            <outputDirectory>/configs/poms</outputDirectory>
            <destName>sorcer-main.pom</destName>
        </file>
        <!-- Copy the Gnostic pom so we can correctly install Gnostic jars into the local repository -->
<!--        <file>
            <source>${basedir}/../rio-services/gnostic/pom.xml</source>
            <outputDirectory>/config/poms</outputDirectory>
            <destName>rio-gnostic.pom</destName>
        </file>-->
        <!-- Copy the logging configuration file -->
        <file>
            <source>${basedir}/src/main/configs/sorcer.logging</source>
            <outputDirectory>/configs/</outputDirectory>
            <destName>sorcer.logging</destName>
        </file>
    </files>
    <fileSets>

<!--        <fileSet>
            <directory>${basedir}/..</directory>
            <includes>
                <include>LICENSE.txt</include>
                <include>NOTICE.txt</include>
                <include>index.html</include>
            </includes>
            <outputDirectory>/</outputDirectory>
        </fileSet>-->

        <!-- bin directory -->
        <fileSet>
            <directory>${basedir}/bin</directory>
            <includes>
                <include>*</include>
            </includes>
            <filtered>true</filtered>
            <fileMode>0755</fileMode>
            <outputDirectory>/bin</outputDirectory>
        </fileSet>

        <!-- docs directory -->
<!--
        <fileSet>
            <directory>${basedir}/../deploy</directory>
            <includes>
                <include>**</include>
            </includes>
            &lt;!&ndash;<filtered>true</filtered>
            <fileMode>0644</fileMode>&ndash;&gt;
            <outputDirectory>/deploy</outputDirectory>
        </fileSet>
-->

        <!-- examples zip -->
<!--        <fileSet>
            <directory>${basedir}/target/staging/examples</directory>
            <includes>
                <include>examples.zip</include>
            </includes>
            <filtered>true</filtered>
            <fileMode>0644</fileMode>-->
<!--            <outputDirectory>/</outputDirectory>
        </fileSet>
-->
        <!-- policy directory -->
        <fileSet>
            <directory>${basedir}/src/main/policy</directory>
            <includes>
                <include>policy.all</include>
            </includes>
            <filtered>true</filtered>
            <fileMode>0644</fileMode>
            <outputDirectory>/policy</outputDirectory>
        </fileSet>

        <!-- Configuration files -->
        <fileSet>
            <directory>${basedir}/src/main/configs</directory>
            <outputDirectory>/configs</outputDirectory>
            <includes>
                <include>**/*</include>
            </includes>
            <filtered>false</filtered>
        </fileSet>

        <!-- Hyperic -->
        <fileSet>
            <!-- WHY DOESNT settings.localRepository WORK HERE??? -->
            <directory>
                ${user.home}/.m2/repository/org/sorcersoft/sigar/${hyperic.version}/lib
            </directory>
            <fileMode>0644</fileMode>
            <outputDirectory>lib/${org.sorcersoft.sigar}</outputDirectory>
            <excludes>
                <exclude>junit.jar</exclude>
                <exclude>log4j.jar</exclude>
            </excludes>
        </fileSet>

    </fileSets>

    <dependencySets>
        <!-- The lib directory are service implementation jars and their transitive requirements -->
       <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <excludes>
                <exclude>net.jini:*</exclude>
                <exclude>net.jini.lookup:*</exclude>
                <exclude>org.apache.river:*</exclude>
                <exclude>org.sorcersoft.sorcer:*</exclude>
                <exclude>org.rioproject.resolver:*</exclude>
                <exclude>org.rioproject:*</exclude>

                <exclude>ant:*</exclude>
                <exclude>jline:*</exclude>
                <exclude>org.codehaus.izpack:*</exclude>
                <exclude>*:oar</exclude>
                <exclude>*:zip</exclude>


        
                <!-- The following exclusions are for the resolver(s) and it's dependencies -->
<!--                <exclude>org.rioproject.resolver:resolver-aether</exclude>
                <exclude>org.rioproject.resolver:resolver-project</exclude>
                <exclude>org.sonatype.*</exclude>
                <exclude>org.apache.maven:*</exclude>
                <exclude>org.apache.maven.wagon:*</exclude>
                <exclude>org.codehaus.plexus:*</exclude>
                <exclude>nekohtml:*</exclude>-->
                <!-- The following exclusions are for gnostic and it's dependencies -->
<!--                <exclude>org.codehaus.janino:*</exclude>
                <exclude>org.drools:*</exclude>
                <exclude>antlr:*</exclude>
                <exclude>org.eclipse.jdt.core.compiler:*</exclude>
                <exclude>org.mvel:*</exclude>-->
                </excludes>
            <outputDirectory>lib/commons</outputDirectory>
            <outputFileNameMapping>${artifact.artifactId}.${artifact.extension}</outputFileNameMapping>
        </dependencySet>

        <!-- Get jsk-dl.jar, jmx-lookup.jar, reggie-dl.jar and serviceui.jar into the lib-dl directory -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <includes>
                <include>net.jini:*</include>
                <include>net.jini.lookup:*</include>
                <include>org.apache.river:*</include>
<!--
                <include>net.jini:jsk-dl</include>
                <include>net.jini:start</include>
                <include>net.jini:jsk-platform</include>
                <include>net.jini:jsk-lib</include>
                <include>net.jini:jsk-resources</include>
                <include>net.jini.lookup:serviceui</include>
                <include>org.apache.river:reggie-dl</include>
                <include>org.apache.river:reggie</include>
                <include>org.apache.river:mahalo-dl</include>
                <include>org.apache.river:mahalo</include>
                <include>org.apache.river:fiddler-dl</include>
                <include>org.apache.river:fiddler</include>
                <include>org.apache.river:mercury-dl</include>
                <include>org.apache.river:mercury</include>
                <include>org.apache.river:norm-dl</include>
                <include>org.apache.river:norm</include>
                <include>org.apache.river:outrigger-dl</include>
                <include>org.apache.river:outrigger</include>
                <include>org.apache.river:start</include>
-->
            </includes>
            <outputDirectory>lib/${org.apache.river}</outputDirectory>
            <outputFileNameMapping>${artifact.artifactId}.${artifact.extension}</outputFileNameMapping>
        </dependencySet>

        <!-- The rest of the service download (-api, -proxy and -ui) jars go into the lib-dl directory -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <includes>
                <include>org.sorcersoft.sorcer:*</include>
<!--
                <include>org.sorcersoft.sorcer:sos-env:jar</include>
                <include>org.sorcersoft.sorcer:sos-util:jar</include>
                <include>org.sorcersoft.sorcer:sos-exertlet-sui:jar</include>
                <include>org.sorcersoft.sorcer:sos-security-sui:jar</include>
                <include>org.sorcersoft.sorcer:commons-req:jar</include>
                <include>org.sorcersoft.sorcer:commons-prv:jar</include>
                &lt;!&ndash; sos-providers &ndash;&gt;
                <include>org.sorcersoft.sorcer:cataloger-prv:jar</include>
                <include>org.sorcersoft.sorcer:dbp-prv:jar</include>
                <include>org.sorcersoft.sorcer:dsp-prv:jar</include>
                <include>org.sorcersoft.sorcer:exertmonitor-prv:jar</include>
                <include>org.sorcersoft.sorcer:jobber-prv:jar</include>
                <include>org.sorcersoft.sorcer:logger-prv:jar</include>
                <include>org.sorcersoft.sorcer:logger-sui:jar</include>
                <include>org.sorcersoft.sorcer:spacer-prv:jar</include>
                &lt;!&ndash; tools&ndash;&gt;
                <include>org.sorcersoft.sorcer:sos-boot:jar</include>
                <include>org.sorcersoft.sorcer:sos-webster:jar</include>
                <include>org.sorcersoft.sorcer:sos-shell:jar</include>
                <include>org.sorcersoft.sorcer:dependencies:jar</include>
                <include>org.sorcersoft.sorcer:browser:jar</include>
                <include>org.sorcersoft.sorcer:locker:jar</include>
-->
            </includes>
            <outputDirectory>lib/${org.sorcersoft.sorcer}</outputDirectory>
            <outputFileNameMapping>${artifact.artifactId}.${artifact.extension}</outputFileNameMapping>
        </dependencySet>

        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <useStrictFiltering>true</useStrictFiltering>
            <includes>
                <include>org.rioproject.resolver:*</include>
                <include>org.rioproject:*</include>
<!--
                <include>org.rioproject.resolver:resolver-aether</include>
                <include>org.rioproject.resolver:resolver-project</include>
                <include>org.rioproject.resolver:resolver-api</include>
                <include>org.rioproject:rio-platform</include>
                <include>org.rioproject:rio-start</include>
-->
            </includes>
            <outputDirectory>lib/${org.rioproject}</outputDirectory>
            <outputFileNameMapping>${artifact.artifactId}.${artifact.extension}</outputFileNameMapping>
        </dependencySet>

    </dependencySets>

</assembly>

