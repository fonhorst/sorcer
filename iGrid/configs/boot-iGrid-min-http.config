import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
	home = "${iGrid.home}";
	policy = "${java.security.policy}";
	ps = System.getProperty("path.separator");
	
	// webster root directories
	sorcerLibPath 	 = home + "${/}lib${/}sorcer${/}lib";
 	sorcerLibDlPath  = home + "${/}lib${/}sorcer${/}lib-dl";
 	//engLibDlPath     = home + "${/}lib${/}eng${/}lib-dl";
 	//productLibDlPath= home + "${/}..${/}Products${/}lib${/}products${/}lib-dl";
    jiniLibPath 	 = home + "${/}lib${/}river${/}lib";
    jiniLibDLPath    = home + "${/}lib${/}river${/}lib-dl";
    //rioLibPath 		 = home + "${/}lib${/}rio${/}lib";
    blitzLib		 = home + "${/}lib${/}common${/}blitz";
    otherLib		 = blitzLib + "${/}thirdpartylib";
    deployPath 		 = home + "${/}deploy";
    httpData 		 = home + "${/}data";
    jfreechartLib	 = home + "${/}lib${/}common${/}jfreechart";
     
	port = Booter.getWebsterPort(); 
	//port = 0;
	address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();
	
	repo = "${user.home}/.m2/repository";
    
    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up root directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)
        // (String policy, int port, String[] roots, boolean isMaven)
        SorcerDescriptorUtil.getWebster(policy, port,
                                         new String[] { sorcerLibPath,
                                         			    sorcerLibDlPath,
                                         			    //engLibDlPath,
                                         			    jiniLibDLPath,
                                                        //rioLibPath,
                                                        jiniLibPath,
                                                        blitzLib,
                                                        deployPath,
                                                        httpData,
                                                        jfreechartLib,
                                                        //productLibDlPath 
                                                        }, true),
                                                        

/*
        new SorcerServiceDescriptor(
            "browser-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "${/}browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { home + "${/}bin${/}jini${/}configs${/}browser.config" }),
*/

		new SorcerServiceDescriptor(
            "/org/apache/river/reggie-dl/2.2.1/reggie-dl-2.2.1.jar",
            policy,
            repo + "/org/apache/river/reggie/2.2.1/reggie-2.2.1.jar",
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}reggie.config" }),

		new SorcerServiceDescriptor(
            "/org/apache/river/mahalo-dl/2.2.1/mahalo-dl-2.2.1.jar",
            policy,
            repo + "/org/apache/river/mahalo/2.2.1/mahalo-2.2.1.jar",
            //jiniLibPath + "/mahalo.jar",
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mahalo.config" }),

/*
       new SorcerServiceDescriptor(
           "fiddler-dl.jar jsk-dl.jar",
           policy,
           jiniLibPath + "/fiddler.jar",
           "com.sun.jini.fiddler.TransientFiddlerImpl",
           new String[] { home + "${/}bin${/}jini${/}configs${/}fiddler.config" }),

        new SorcerServiceDescriptor(
            "mercury-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/mercury.jar",
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mercury.config" }),


        new SorcerServiceDescriptor(
            "norm-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/norm.jar",
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}norm.config" }),
            
        new SorcerServiceDescriptor(
            "outrigger-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "/outrigger.jar",
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}outrigger.config" }),
*/

 /*  		// Blitz
        new SorcerServiceDescriptor(
 			"blitz-dl.jar blitzui.jar",
            policy, 
            ConfigUtil.concat(new Object[] {
            	blitzLib, "${/}blitz.jar",
            	ps, blitzLib, "${/}blitzui.jar",
            	ps, home, "${/}lib${/}common${/}je-4.1.21.jar",
            	ps, jiniLibPath, "${/}serviceui.jar",
            	ps, home, "${/}lib${/}river${/}lib-dl${/}outrigger-dl.jar",
            	ps, jiniLibPath, "${/}jsk-platform.jar" }
            	),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}bin${/}blitz${/}configs${/}blitz.config" }),
*/
/*
		// MutualExclusion - Locker
  		new SorcerServiceDescriptor(
           "lockmgr-dl.jar",
           policy, 
            ConfigUtil.concat(new Object[] {
            	blitzLib, "${/}lockmgr.jar",
            	ps, otherLib, "${/}jgroups.jar",
            	ps, home, "${/}lib${/}river${/}lib-dl${/}outrigger-dl.jar",
            	ps, jiniLibPath, "${/}jsk-platform.jar" }
            	),
            "org.dancres.blitz.jini.lockmgr.ServerImpl",
             new String[] { home + "${/}bin${/}blitz${/}configs${/}lockmgr.config" }),
 */ 
    		/* SORCER Job Service */
       		SorcerDescriptorUtil.getJobber(
       			policy, 
       			home + "${/}bin${/}sorcer${/}jobber${/}configs${/}jobber-prv.config"),
    
     		/* SORCER Space Service */
 /*       		SorcerDescriptorUtil.getSpacer(
       			policy, 
       			home + "${/}bin${/}sorcer${/}jobber${/}configs${/}spacer-prv.config"),
   */    
       		/* SORCER Catalog Service */
      		SorcerDescriptorUtil.getCataloger(
       			policy, 
       			home + "${/}bin${/}sorcer${/}cataloger${/}configs${/}cataloger-prv.config"),
    			
       		/* SORCER Logger Service */
/*       		SorcerDescriptorUtil.getLogger(
       			policy, 
       			home + "${/}bin${/}sorcer${/}logger${/}configs${/}logger-prv.config"),
*/       			
       		/* SORCER ExertMonitor Service */
/*       		SorcerDescriptorUtil.getExertMonitor(
       			policy, 
       			home + "${/}bin${/}sorcer${/}exertmonitor${/}configs${/}exertmonitor-prv.config"),
*/       			
       		/* SORCER Database Store Service */
/*       		SorcerDescriptorUtil.getDatabaseStorer(
       			policy, 
       			home + "${/}bin${/}sorcer${/}dbp${/}configs${/}dbp-prv.config")
*/ 
    };
}
