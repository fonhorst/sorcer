import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;

import sorcer.resolver.Resolver;
import sorcer.core.SorcerEnv;

// Phoenix activation service
// Reggie service registrar and lookup service
// Outrigger JavaSpace
// Mahalo transaction server service
// Norm lease renewal service
// Mercury event mailbox
// Fiddler server side lookup discovery service
	
com.sun.jini.start {
    home = "${sorcer.home}";
    policy = "${java.security.policy}";
    ps = System.getProperty("path.separator");

    // webster root directories
    jiniLibPath 	 = home + "${/}lib${/}river${/}lib";
    jiniLibDLPath    = home + "${/}lib${/}river${/}lib-dl";
    deployPath 		 = home + "${/}deploy";
    httpData 		 = home + "${/}data";
     
    port = Booter.getWebsterPort(); 
    //port = 0;
    address = Booter.getWebsterInterface();
    startPort = Booter.getWebsterStartPort();
    endPort = Booter.getWebsterEndPort();
	
    repo = SorcerEnv.getRepoDir() + "/";
    
    serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up 10 directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug, boolean isDaemon)
        /*SorcerDescriptorUtil.getWebster(policy,
                                         port,
                                         new String[] { 
                                                        jiniLibPath,
                                                        httpData,
                                                        deployPath,
                                                        repo
                                                        },
                                         address,
                                         startPort,
                                         endPort,
                                         true,
                                         false),
*/
  	new SorcerServiceDescriptor(null, 
   			"${java.security.policy}",
			Resolver.resolveAbsolute("org.sorcersoft.sorcer:sos-webster"), 
			"sorcer.tools.webster.Webster", 
			new String[] { "${sorcer.home}${/}bin${/}webster${/}configs${/}webster-prv.config" }),
                                         
                                         
/*
        new SorcerServiceDescriptor(
            "browser-dl.jar jsk-dl.jar",
            policy,
            jiniLibPath + "${/}browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { home + "${/}bin${/}jini${/}configs${/}browser.config" }),
*/

	    new SorcerServiceDescriptor(
	      	""+Resolver.resolveRelative("org.apache.river:reggie-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:reggie"),
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}reggie.config" }),
            
		new SorcerServiceDescriptor(
	    	""+Resolver.resolveRelative("org.apache.river:mahalo-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:mahalo"),
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mahalo.config" }),


       new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:fiddler-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:fiddler"),
           "com.sun.jini.fiddler.TransientFiddlerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}fiddler.config" }),

        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:mercury-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:mercury"),
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}mercury.config" }),


        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:norm-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:norm"),
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}norm.config" }),
            
        new SorcerServiceDescriptor(
	      	"" + Resolver.resolveRelative("org.apache.river:outrigger-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:outrigger"),
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}outrigger.config" }),
            

   		// Blitz

        new SorcerServiceDescriptor(
 			Resolver.resolveRelative("org.dancres.blitz:blitz-dl") +
 			" " + Resolver.resolveRelative("org.dancres.blitz:blitzui"),
            policy, 
            ConfigUtil.concat(new Object[] {
            	Resolver.resolveAbsolute("org.dancres.blitz:blitz"), ps,
            	Resolver.resolveAbsolute("org.dancres.blitz:blitzui"), ps,
            	Resolver.resolveAbsolute("com.sleepycat:je:4.1.21"), ps,
            	Resolver.resolveAbsolute("net.jini.lookup:serviceui"), ps,
            	Resolver.resolveAbsolute("org.apache.river:outrigger-dl"), ps,
            	Resolver.resolveAbsolute("net.jini:jsk-platform")
            }),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}bin${/}blitz${/}configs${/}blitz.config" }),

/*
		// MutualExclusion - Locker
  		new SorcerServiceDescriptor(
           "lockmgr-dl.jar",
           policy, 
            ConfigUtil.concat(new Object[] {
            	blitzLib, "${/}lockmgr.jar",
            	ps, otherLib, "${/}jgroups.jar",
            	ps, home, "${/}lib${/}river${/}lib-dl${/}outrigger-dl.jar",
            	ps, jiniLibPath, "${/}jsk-platform.jar" }
            	),
            "org.dancres.blitz.jini.lockmgr.ServerImpl",
             new String[] { home + "${/}bin${/}blitz${/}configs${/}lockmgr.config" }),
 */ 
   		// SORCER Job Service 
       		SorcerDescriptorUtil.getJobber(
       			policy,
       			home + "${/}sos-providers${/}jobber${/}jobber-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config"),
   
     		// SORCER Space Service
       		SorcerDescriptorUtil.getSpacer(
       			policy,
       			home + "${/}sos-providers${/}spacer${/}spacer-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config"), 

    
       		// SORCER Catalog Service
      		SorcerDescriptorUtil.getCataloger(
       			policy, 
       			home + "${/}sos-providers${/}cataloger${/}cataloger-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config"),
     			
       		// SORCER Logger Service
       		SorcerDescriptorUtil.getLogger(
       			policy, 
       			home + "${/}sos-providers${/}logger${/}logger-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config"),
      			
       		// SORCER ExertMonitor Service
       		SorcerDescriptorUtil.getExertMonitor(
       			policy, 
       			home + "${/}sos-providers${/}exertmonitor${/}exertmonitor-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config"),
       			
       		// SORCER Database Store Service
       		SorcerDescriptorUtil.getDatabaseStorer(
       			policy, 
       			home + "${/}sos-providers${/}dbp${/}dbp-prv${/}src${/}main${/}resources${/}META-INF${/}sorcer${/}services.config")
 
    };
}
