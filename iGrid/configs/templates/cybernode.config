/*
 * Configuration for a Cybernode
 */
import java.net.InetAddress;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import com.sun.jini.config.ConfigUtil;
import org.rioproject.log.LoggerConfig;
import org.rioproject.log.LoggerConfig.LogHandlerConfig;
import org.rioproject.system.ComputeResource;
import org.rioproject.fdh.FaultDetectionHandlerFactory;

import net.jini.config.Configuration;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import org.rioproject.boot.BootUtil;

/* --------------------------------------------------------------------------
 * Declare Cybernode properties
 * --------------------------------------------------------------------------*/
org.rioproject.cybernode {
    initialLookupGroups = new String[] {"rio"};
    //initialLookupGroups = new String[] {"${user.name}"};
    serviceName = "Cybernode";
    serviceComment = "Dynamic Agent";

    provisionEnabled = Boolean.valueOf(true);

    jmxName = "org.rioproject.cybernode:type=Cybernode";
    nativeLibDirectory = "${RIO_NATIVE_DIR}";    

    loggerConfigs = new LoggerConfig[] {
        new LoggerConfig("org.rioproject.cybernode",
                         Level.FINE,
                         false,
                         new LogHandlerConfig[] {
                             new LogHandlerConfig(new ConsoleHandler())}
                         )
        };


    /* Configure a FaultDetectionHandler for the Cybernode */
    fdh = "org.rioproject.fdh.HeartbeatFaultDetectionHandler";
    /* Point to this configuration file */
    configFile = "${RIO_HOME}/config/cybernode.config";
    faultDetectionHandler =
        FaultDetectionHandlerFactory.getClassBundle(fdh, configFile);
}

/* --------------------------------------------------------------------------
 * Declare HeartbeatFaultDetectionHandler properties
 * --------------------------------------------------------------------------*/
org.rioproject.fdh.HeartbeatFaultDetectionHandler {
    heartbeatPeriod=10000;
    heartbeatGracePeriod=10000;
}

/* ----------------------------------------------------------------------------
 * Declare attributes for creating the ComputeResource object.
 * --------------------------------------------------------------------------*/
org.rioproject.boot {
    /* The compute resource configuration simply refers to this file  */
    computeResourceConfig = "${RIO_HOME}${/}config${/}cybernode.config";
    computeResource = new ComputeResource(new String[] {computeResourceConfig},
                                          (Configuration)$data);
}

/* ----------------------------------------------------------------------------
 * Declare ComputeResource properties
 * --------------------------------------------------------------------------*/
org.rioproject.system {
    host = BootUtil.getHostAddressFromProperty("java.rmi.server.hostname");
    address = InetAddress.getByName(host);

    /* Report every 60 seconds. This is how often the compute resource
     * informs registered Observers of a state change. A state change is
     * determined if any of the MeasurableCapability components contained within
     * this ComputeResource provide an update in the interval specified by the
     * reportInterval property */
    reportInterval = 60000;

    //systemThreshold = 0.9;
}

/* ----------------------------------------------------------------------------
 * Configuration for the physical machine CPU measurableCapability
 * --------------------------------------------------------------------------*/
org.rioproject.system.measurable.cpu {
    /* Report every 15 seconds with a sample size of 2, which means a result
     * will be produced every 30 seconds */
    //reportRate = 15000;
    //sampleSize = 2;
    reportRate = 5000;
}

/* ----------------------------------------------------------------------------
 * Configuration for the JVM's CPU measurableCapability
 * --------------------------------------------------------------------------*/
org.rioproject.system.measurable.cpu.jvm {
    reportRate = 5000;
}

/* ----------------------------------------------------------------------------
 * Configuration for the Memory measurableCapability
 * --------------------------------------------------------------------------*/
org.rioproject.system.measurable.memory {
    thresholdValues = new org.rioproject.watch.ThresholdValues(0.0, 0.8);
    /* Report every 5 seconds */
    reportRate = 5000;
    //sampleSize = 2;
}

/* ----------------------------------------------------------------------------
 * Configure the watchDataSourceExporter
 * --------------------------------------------------------------------------*/
org.rioproject.watch {
    watchDataSourceExporter = org.rioproject.defaultExporter;
}


/* ----------------------------------------------------------------------------
 * The exporter to declare as the *default* exporter for services and utilities
 * --------------------------------------------------------------------------*/
org.rioproject {
    host = BootUtil.getHostAddressFromProperty("java.rmi.server.hostname");
    defaultExporter =
        new BasicJeriExporter(TcpServerEndpoint.getInstance(host, 0),
                              new BasicILFactory());
}

/* ----------------------------------------------------------------------------
 * Default exporter to use for the ServiceDiscoveryManager is the same as the
 * exporter declared above
 * --------------------------------------------------------------------------*/
net.jini.lookup.ServiceDiscoveryManager {
    eventListenerExporter = org.rioproject.defaultExporter;
}

/* ----------------------------------------------------------------------------
 * Test the liveness of  multicast announcements from previously discovered
 * lookup services every 5 seconds
 * --------------------------------------------------------------------------*/
net.jini.discovery.LookupDiscovery {
    multicastAnnouncementInterval =  5000;
}

org.rioproject.jmx {
    serviceName = "Cybernode JMX Agent";
}
