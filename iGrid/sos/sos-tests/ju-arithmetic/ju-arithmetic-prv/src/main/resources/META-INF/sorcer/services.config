import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import sorcer.provider.boot.Booter;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;
import sorcer.resolver.Resolver;
import sorcer.core.SorcerEnv;
	
com.sun.jini.start {
	home = "${sorcer.home}";
	policy = "${java.security.policy}";
	
	runtimeClasspath = "${provider.runtime.classpath}";
	//= System.getenv("runtime.classpath");
	ps = System.getProperty("path.separator");
	
	// webster root directories
	jiniLibPath 	= home + "${/}lib${/}river${/}lib";
	jiniLibDLPath 	= home + "${/}lib${/}river${/}lib-dl";
	deployPath 	= home + "${/}deploy";
	repo 			 = SorcerEnv.getRepoDir() + "/";
	
	port = Booter.getWebsterPort();
	//port = 0;
	//address = Booter.getWebsterInterface();
	//startPort = Booter.getWebsterStartPort();
	//endPort = Booter.getWebsterEndPort();
    
	serviceDescriptors = new ServiceDescriptor[] {
        /* SORCER Webster, set to serve up root directories */
        // (String policy, int port, String[] roots, String address, int startPort, int endPort, boolean debug)

	new SorcerServiceDescriptor(
 			""+Resolver.resolveRelative("org.sorcersoft.sorcer:ju-arithmetic-api")
 			+" "+Resolver.resolveRelative("org.sorcersoft.sorcer:sos-platform"),
			policy,
			ConfigUtil.concat(new Object[] {
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-api"), ps,
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-prv"), ps,
			    runtimeClasspath
			}),
			"sorcer.core.provider.ServiceTasker",
			new String[] { "src${/}main${/}resources${/}META-INF${/}sorcer${/}adder-prv.config" }
        ),

	new SorcerServiceDescriptor(
 			""+Resolver.resolveRelative("org.sorcersoft.sorcer:ju-arithmetic-api")
 			+" "+Resolver.resolveRelative("org.sorcersoft.sorcer:sos-platform"),
			policy,
			ConfigUtil.concat(new Object[] {
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-api"), ps,
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-prv"), ps,
			    runtimeClasspath
			}),
			"sorcer.core.provider.ServiceTasker",
			new String[] { "src${/}main${/}resources${/}META-INF${/}sorcer${/}multiplier-prv.config" }
       ),
          	
       new SorcerServiceDescriptor(
 			""+Resolver.resolveRelative("org.sorcersoft.sorcer:ju-arithmetic-api")
 			+" "+Resolver.resolveRelative("org.sorcersoft.sorcer:sos-platform"),
			policy,
			ConfigUtil.concat(new Object[] {
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-api"), ps,
			    Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-prv"), ps,
			    runtimeClasspath
			}),
			"sorcer.core.provider.ServiceTasker",
			new String[] { "src${/}main${/}resources${/}META-INF${/}sorcer${/}divider-prv.config" }
	   ),

       new SorcerServiceDescriptor(
		      ""+Resolver.resolveRelative("org.sorcersoft.sorcer:ju-arithmetic-api")
				  +" "+Resolver.resolveRelative("org.sorcersoft.sorcer:sos-platform"),
		      policy,
		      ConfigUtil.concat(new Object[] {
			  Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-api"), ps,
			  Resolver.resolveAbsolute("org.sorcersoft.sorcer:ju-arithmetic-prv"), ps,
			  runtimeClasspath
		      }),
		      "sorcer.core.provider.ServiceTasker",
		      new String[] { "src${/}main${/}resources${/}META-INF${/}sorcer${/}subtractor-prv.config" }
       )
    };
}
