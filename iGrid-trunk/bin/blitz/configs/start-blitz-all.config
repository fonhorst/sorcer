import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.config.ConfigUtil;
import org.rioproject.boot.sorcer.ServiceDescriptorUtil;
import sorcer.util.Sorcer;

// Starts up Blitz in non-activatable mode with an embedded webster to save
// starting it up separately from the command-line. 

com.sun.jini.start {

    	private static iGridHome = Env.getHomeDir();
    	private static hostname = Env.getHostName();
  		private static codebasePort = Env.getWebsterPort();
  		  		        
  		private static commonLib = ConfigUtil.concat(new Object[] {iGridHome, "/common/"});
  		private static jiniLib = ConfigUtil.concat(new Object[] {iGridHome, "/common/river/lib/"});
  		private static jiniDlLib = ConfigUtil.concat(new Object[] {iGridHome, "/common/river/lib-dl/"});
  	
  	   // Should be edited to point at the directory containing the je.jar
        private static dbLib = ConfigUtil.concat(new Object[] {commonLib, "je-4.1.21.jar"});

        private static blitzLib = ConfigUtil.concat(new Object[] {commonLib, "blitz/"});

	    private static otherLib = ConfigUtil.concat(new Object[] {
	                                blitzLib, "thirdpartylib/"
	                              });
	                              
  	    private static codebase = ConfigUtil.concat(new Object[] {
            "http://", hostname, ":", codebasePort, "/", "blitz-dl.jar", " ",
            "http://", hostname, ":", codebasePort, "/", "blitzui.jar", " ",
            "http://", hostname, ":", codebasePort, "/", "serviceui-1.1.jar", " ",
            "http://", hostname, ":", codebasePort, "/", "/backport-util-concurrent60.jar"});
          
  		private static separator = System.getProperty("path.separator");

 		static classpath = ConfigUtil.concat(new Object[] {
            jiniLib, "jsk-lib.jar",
            separator, jiniLib, "jsk-platform.jar",
            separator, jiniLib, "jsk-lib.jar", separator, dbLib,
            separator, otherLib, "backport-util-concurrent60.jar",
            separator, blitzLib, "blitz.jar",
            separator, blitzLib, "blitzui.jar",
            separator, commonLib, "sorcer/lib/sorcer-prv.jar",
            separator, jiniLib, "serviceui.jar"});
            
        private static config = ConfigUtil.concat(new Object[] {
            iGridHome, "/bin/blitz/configs/blitz.config"});

	 	private static policy = ConfigUtil.concat(new Object[] {
            iGridHome, "/bin/blitz/policy/blitz.policy"});

        //Reggie
        private static reggieCodebase=ConfigUtil.concat(new Object[] {
            "http://", hostname, ":", codebasePort, "/reggie-dl.jar",
            " http://", hostname, ":", codebasePort, "/jsk-dl.jar"});
            
		private static reggieClasspath = ConfigUtil.concat(new Object[] {jiniLib, "reggie.jar"});
        private static reggieConfig = ConfigUtil.concat(new Object[] {
            iGridHome, "/bin/blitz/configs/reggie.config"});
            
        //Mahalo
        private static mahaloCodebase=ConfigUtil.concat(new Object[] {
            "http://", hostname, ":", codebasePort, "/mahalo-dl.jar",
            " http://", hostname, ":", codebasePort, "/jsk-dl.jar"});
            
 		private static mahaloClasspath = ConfigUtil.concat(new Object[] {jiniLib, "mahalo.jar"});
  		private static mahaloConfig = ConfigUtil.concat(new Object[] {
            iGridHome, "/bin/blitz/configs/mahalo.config"});
            
        //service descriptors   
        static serviceDescriptors = new ServiceDescriptor[] {
                 // webster  String policy, int port, String[] roots, String address, boolean debug
                 SorcerDescriptorUtil.getWebster(policy, Integer.parseInt(codebasePort),
                 	new String[] { jiniLib, jiniDlLib, blitzLib, commonLib, otherLib}, null, true),
		    	 
           		// reggie
                new NonActivatableServiceDescriptor(
                    reggieCodebase, policy, reggieClasspath,
                    "com.sun.jini.reggie.TransientRegistrarImpl",
                    new String[] { reggieConfig }),

                // mahalo
                new NonActivatableServiceDescriptor(
                    mahaloCodebase, policy, mahaloClasspath,
                    "com.sun.jini.mahalo.TransientMahaloImpl",
                    new String[] { mahaloConfig }),

                 // Blitz
                 new NonActivatableServiceDescriptor(
                        codebase, policy, classpath,
                        "org.dancres.blitz.remote.BlitzServiceImpl",
                         new String[] { config }
        )};
}
