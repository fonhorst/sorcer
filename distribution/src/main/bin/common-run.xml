<?xml version="1.0"?>
<!-- 
 * Copyright 2010 the original author or authors.
 * Copyright 2010 SorcerSoft.org.
 *  
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

How to use the common-run.xml file in your project. 
To include this file in your custom *-run-buld.xml have the import line:

  <import file="../../common-run.xml" />

-->

<project name="SorcerCommon" default="" basedir="." xmlns:ac="http://ant-contrib.sourceforge.net">

	<property name="dospawn" value="false" />

	<property environment="env" />
	<property name="java.home" value="${env.JAVA_HOME}" />	
	
	<dirname property="common-run.loc" file="${ant.file.SorcerCommon}"/>
	
	<condition property="sorcer.home" value="${env.SORCER_HOME}" else="${common-run.loc}/../">
		<isset property="env.SORCER_HOME" />
	</condition>	
	<property name="lib.dir" value="${sorcer.home}/lib" />	
	
	<condition property="rio.home" value="${env.RIO_HOME}" else="${lib.dir}/rio">
		<isset property="env.RIO_HOME" />
	</condition>

    <condition property="mvn.repo"  value="${sorcer.local.repo.location}" else="${env.HOME}/.m2/repository/">
        <isset property="sorcer.local.repo.location" />
    </condition>
	
	<exec executable="hostname" outputproperty="hostname" />
	<echo message="Hostname = ${hostname}" />
	<echo message="env SORCER_HOME = ${sorcer.home}" />
	<echo message="env RIO_HOME = ${rio.home}" />

	<loadproperties srcfile="${sorcer.home}/configs/sorcer.env" />

	<property name="docs" value="${sorcer.home}/docs/${module.name}" />
	<property name="sorcer.policy" value="${sorcer.home}/policy" />
	<property name="sorcer.config" value="${sorcer.home}/configs" />

	
	<taskdef resource="net/sf/antcontrib/antlib.xml" uri="http://ant-contrib.sourceforge.net">
		<classpath>
			<pathelement location="${lib.dir}/commons/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- Properties are IMMUTABLE. Once set it cannot be changed. Here we specify that environment variables take precedence. -->

	<condition property="localhost" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<condition property="local.interface" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<!--SAB -->
	<condition property="provider.webster.interface.TMP" value="${provider.webster.interface}">
		<not>
			<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
		</not>
	</condition>
	<condition property="provider.webster.interface.TMP" value="${hostname}">
		<equals arg1="${provider.webster.interface}" arg2="$${localhost}" />
	</condition>

	<echo message="provider.webster.interface.TMP = ${provider.webster.interface.TMP}" />

	<condition property="provider.webster.url" value="http://${env.SORCER_WEBSTER_INTERFACE}:${env.SORCER_WEBSTER_PORT}">
		<and>
			<isset property="env.SORCER_WEBSTER_INTERFACE" />
			<isset property="env.SORCER_WEBSTER_PORT" />
		</and>
	</condition>

	<condition property="provider.webster.url" value="http://${local.interface}:${provider.webster.port}" else="http://${provider.webster.interface}:${provider.webster.port}">
		<isset property="local.interface" />
	</condition>

	<echo message="provider.webster.url = ${provider.webster.url}" />

	<condition property="data.server.url" value="http://${env.DATA_SERVER_INTERFACE}:${env.DATA_SERVER_PORT}" else="http://${data.server.interface}:${data.server.port}">
		<and>
			<isset property="env.DATA_SERVER_INTERFACE" />
			<isset property="env.DATA_SERVER_PORT" />
		</and>
	</condition>

	<condition property="requestor.policy" value="${basedir}/src/main/resources/policy/req.policy">
		<not>
			<isset property="requestor.policy" />
		</not>
	</condition>
	
	<target name="requestor.policy.check">
	  <condition property="requestor.policy.exists">
	    <available file="${requestor.policy}" type="file"/>
	  </condition>
	  <ac:if>
	      <not>
		<isset property="requestor.policy.exists" />
	      </not>
	      <ac:then>
		<property name="requestor.policy" value="${sorcer.home}/configs/sorcer.policy" />
		<echo>setting default policy: ${requestor.policy}</echo>
	   </ac:then>
	</ac:if>

	</target>

	<condition property="provider.spawn" value="no">
		<not>
			<isset property="provider.spawn" />
		</not>
	</condition>

	<target name="groovyRun">
		<groovy src="${groovySrc}">
			<classpath>
				<pathelement location="${groovyDir}" />
			</classpath>
		</groovy>
	</target>

	<target name="set-hostname">
		<condition property="hostname" value="${env.HOST}">
			<os family="unix" />
		</condition>
		<condition property="hostname" value="${env.COMPUTERNAME}">
			<os family="windows" />
		</condition>
		<echo message="host = ${hostname}" />
	</target>

	<!-- jini start classpath -->
	<path id="jini.classpath">
		<pathelement location="${lib.dir}/river/jsk-platform.jar" />
 		<pathelement location="${lib.dir}/river/jsk-lib.jar" />
		<pathelement location="${lib.dir}/river/start.jar" />
		<pathelement location="${lib.dir}/river/serviceui.jar" />
		<pathelement location="${lib.dir}/commons/reference-collections.jar" />
		<pathelement location="${lib.dir}/commons/high-scale-lib.jar" />
		<pathelement location="${lib.dir}/commons/slf4j-api.jar" />
		<pathelement location="${lib.dir}/commons/logback-classic.jar" />
		<pathelement location="${lib.dir}/commons/logback-core.jar" />
	</path>
	
	<path id="boot.classpath">
		<path refid="jini.classpath" />
		<pathelement location="${lib.dir}/sorcer/sos-boot.jar" />
		<pathelement location="${lib.dir}/sorcer/sos-env.jar" />
		<pathelement location="${lib.dir}/sorcer/sos-webster.jar" />
		<pathelement location="${lib.dir}/river/jsk-resources.jar" />
		<pathelement location="${lib.dir}/rio/rio-platform.jar" />
		<pathelement location="${lib.dir}/rio/resolver-api.jar" />
		<pathelement location="${lib.dir}/rio/resolver-aether.jar" />
		<pathelement location="${lib.dir}/rio/rio-start.jar" />
		<pathelement location="${lib.dir}/commons/groovy-all.jar" />
		<pathelement location="${lib.dir}/commons/guava.jar" />
		<pathelement location="${lib.dir}/commons/commons-lang3.jar" />
		<!--<pathelement location="${lib.dir}/commons/google-collections.jar" />-->
	</path>


    <path id="runtime.classpath">
    </path>
	
	<condition property="pom.file" value="pom.xml">
		<not>
			<isset property="pom.file" />
		</not>
	</condition>

	<!-- left for compatibility with development common-run.xml -->
	<target name="mvn-init">
	</target>

	<target name="target.classes.check">
	  <condition property="target.classes.exists">
	    <available file="${basedir}/target/classes" type="dir"/>
	  </condition>
	</target>
	
	<target name="boot.provider" depends="target.classes.check">
		<ac:if>
		  <isset property="provider.config" />		 
		    <ac:then>
		      <java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${provider.spawn}">
			      <classpath refid="boot.classpath" />
			      <arg value="${provider.config}" />
			      <!--        <jvmarg value="-Xdebug"/>
			      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,address=8000"/>-->
			      <env key="RIO_HOME" value="${rio.home}" />
			      <sysproperty key="sorcer.home" value="${sorcer.home}" />
			      <sysproperty key="RIO_HOME" value="${rio.home}" />
			      <sysproperty key="sorcer.env.file" value="${sorcer.home}/configs/sorcer.env" />
			      <sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
			      <sysproperty key="java.util.logging.config.file" value="${sorcer.home}/configs/sorcer.logging" />
			      <sysproperty key="provider.runtime.classpath" value="" />
			      <sysproperty key="java.rmi.server.useCodebaseOnly" value="false" />
		      </java>
		  </ac:then>
		  <ac:else>
		    <ac:if>
		      <isset property="target.classes.exists" />		 
		      <ac:then>
			<java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${provider.spawn}">
				<classpath refid="boot.classpath" />
				<arg value="${basedir}/target/classes" />
				<env key="RIO_HOME" value="${rio.home}" />
				<sysproperty key="sorcer.home" value="${sorcer.home}" />
				<sysproperty key="sorcer.env.file" value="${sorcer.home}/configs/sorcer.env" />
				<sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
				<sysproperty key="java.util.logging.config.file" value="${sorcer.home}/configs/sorcer.logging" />
				<sysproperty key="provider.runtime.classpath" value="" />
				<sysproperty key="java.rmi.server.useCodebaseOnly" value="false" />
			</java>
		      </ac:then>
		      <ac:else>
			  <java classname="sorcer.boot.ServiceStarter" fork="yes" spawn="${provider.spawn}">
				<classpath refid="boot.classpath" />
				<env key="RIO_HOME" value="${rio.home}" />
				<sysproperty key="sorcer.home" value="${sorcer.home}" />
				<sysproperty key="sorcer.env.file" value="${sorcer.home}/configs/sorcer.env" />
				<sysproperty key="java.security.policy" value="${basedir}/src/main/resources/policy/prv.policy" />
				<sysproperty key="java.util.logging.config.file" value="${sorcer.home}/configs/sorcer.logging" />
				<sysproperty key="provider.runtime.classpath" value="" />
				<sysproperty key="java.rmi.server.useCodebaseOnly" value="false" />
			 </java>
		      </ac:else>
		    </ac:if>
		  </ac:else>
		</ac:if>
	</target>
	
	<target name="run.requestor" depends="requestor.policy.check">
		<property name="myclasspath" refid="run-req.classpath" />
		<echo message="Run Classpath = ${myclasspath}" />
		<echo>Policy: ${requestor.policy}</echo>	     
		<ac:if>
			<isset property="requestor.codebase" />
			<ac:then>
			  	<echo message="Run Codebase = ${requestor.codebase}" />
				<java classname="${requestor.class}" fork="yes">
					<classpath refid="run-req.classpath" />
					<sysproperty key="java.util.logging.config.file" value="${sorcer.home}/configs/sorcer.logging" />
					<sysproperty key="java.security.policy" value="${requestor.policy}" />
					<sysproperty key="sorcer.env.file" value="${sorcer.home}/configs/sorcer.env" />
					<sysproperty key="java.rmi.server.codebase" value="${requestor.codebase}" />
					<sysproperty key="java.rmi.server.useCodebaseOnly" value="false" />
				</java>
			</ac:then>
			<ac:else>
				<java classname="${requestor.class}" fork="yes">
					<classpath refid="run-req.classpath" />
					<sysproperty key="java.util.logging.config.file" value="${sorcer.home}/configs/sorcer.logging" />
					<sysproperty key="java.security.policy" value="${requestor.policy}" />
					<sysproperty key="sorcer.env.file" value="${sorcer.home}/configs/sorcer.env" />
					<sysproperty key="java.rmi.server.useCodebaseOnly" value="false" />
				</java>
			</ac:else>
		</ac:if>
	</target>
</project>
