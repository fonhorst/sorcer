import java.net.URL;
import com.sun.jini.start.ServiceDescriptor;
import sorcer.provider.boot.SorcerDescriptorUtil;
import sorcer.provider.boot.SorcerServiceDescriptor;
import sorcer.core.SorcerEnv;
import sorcer.resolver.Resolver;
import sorcer.util.Artifact;
import sorcer.util.ArtifactCoordinates;
import java.io.File;
import sorcer.provider.boot.Booter;
import com.sun.jini.config.ConfigUtil;

com.sun.jini.start {
	home = "${sorcer.home}";
	policy = "${java.security.policy}";
	ps = System.getProperty("path.separator");

	//port = 0;

	serviceDescriptors = new ServiceDescriptor[] {
		/* SORCER Webster, set to serve up root directories */
		// (String policy, int port, String[] roots)
		//SorcerDescriptorUtil.getWebster(policy, port, Booter.getWebsterHostName(), SorcerEnv.getWebsterRoots()),
		  	
	  new SorcerServiceDescriptor(null,
   			policy,
			Resolver.resolveAbsolute("org.sorcersoft.sorcer:sos-webster"), 
			"sorcer.tools.webster.Webster", 
			new String[] { home + "${/}bin${/}webster${/}configs${/}webster-prv.config" }),
                  
                  new SorcerServiceDescriptor(
	      	""+Resolver.resolveRelative("org.apache.river:reggie-dl"),
            policy,
            Resolver.resolveAbsolute("org.apache.river:reggie"),
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "${/}bin${/}jini${/}configs${/}reggie.config" }),
            

	    /*new SorcerServiceDescriptor(
	      	Resolver.resolveCodeBase(
	      		new ArtifactCoordinates[]{
	      			ArtifactCoordinates.coords("org.apache.river:reggie-dl")
	      		}
	      	),
            policy,
            Resolver.resolveClassPath(
            	new ArtifactCoordinates[]{
            		ArtifactCoordinates.coords("org.apache.river:reggie")
				}
			),
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { home + "/bin/jini/configs/reggie.config" }
		),*/
		
		
		   		// Blitz

        new SorcerServiceDescriptor(
 			Resolver.resolveRelative("org.dancres.blitz:blitz-dl") +
 			" " + Resolver.resolveRelative("org.dancres.blitz:blitzui"),
            policy, 
            ConfigUtil.concat(new Object[] {
            	Resolver.resolveAbsolute("org.dancres.blitz:blitz"), ps,
            	Resolver.resolveAbsolute("org.dancres.blitz:blitzui"), ps,
            	Resolver.resolveAbsolute("com.sleepycat:je"), ps,
            	Resolver.resolveAbsolute("net.jini.lookup:serviceui"), ps,
            	Resolver.resolveAbsolute("org.apache.river:outrigger-dl"), ps,
            	Resolver.resolveAbsolute("net.jini:jsk-platform")
            }),
	        "org.dancres.blitz.remote.BlitzServiceImpl",
          	new String[] { home + "${/}bin${/}blitz${/}configs${/}blitz.config" }),


		new SorcerServiceDescriptor(
			Resolver.resolveCodeBase(
				new ArtifactCoordinates[]{
					ArtifactCoordinates.coords("com.example.sorcer:first-api:1.0.0-SNAPSHOT"),
					Artifact.getSosPlatform()
				}
			),
			policy,
			Resolver.resolveClassPath(
				new ArtifactCoordinates[]{
					ArtifactCoordinates.coords("com.example.sorcer:first-api:1.0.0-SNAPSHOT"),
					ArtifactCoordinates.coords("com.example.sorcer:first-prv:1.0.0-SNAPSHOT")
				}
			),
			"sorcer.core.provider.ServiceTasker",
			new String[] { "classpath:/META-INF/sorcer/SampleService.config" }
		)
	};
}
